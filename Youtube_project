
import googleapiclient.discovery
from googleapiclient.discovery import build
import pymongo
import pandas as pd
import sqlalchemy as sa
from streamlit_option_menu import option_menu
import streamlit as st
import numpy as np
import altair as alt
import matplotlib.pyplot as plt
import plotly.express as px
from PIL import Image

# SETTING PAGE CONFIGURATIONS
st.set_page_config(page_title= "Youtube Data Harvesting and Warehousing | By Parikshit N H",
                   layout= "wide",
                   initial_sidebar_state= "expanded",
                   menu_items={'About': """# This app is created by *Parikshit N H!*"""})

# CREATING OPTION MENU
with st.sidebar:
    selected = option_menu(None, ["Home","Extract and Transform","View"],
                           icons=["house-door-fill","tools","card-text"],
                           default_index=0,
                           orientation="vertical",
                           styles={"nav-link": {"font-size": "30px", "text-align": "centre", "margin": "0px",
                                                "--hover-color": "#C80101"},
                                   "icon": {"font-size": "30px"},
                                   "container" : {"max-width": "6000px"},
                                   "nav-link-selected": {"background-color": "#C80101"}})

# Bridging a connection with MongoDB Atlas and Creating a new database(youtube_data)
client = pymongo.MongoClient("mongodb+srv://pnhurukadli:O9IWeOJZj89cJxwe@cluster0.tmqwxri.mongodb.net/?retryWrites=true&w=majority")
db = client['youtube']

# CONNECTING WITH MYSQL DATABASE
import mysql.connector
mycon = mysql.connector.connect(
    host = "localhost",
    user = "root",
    password="12345",
    database = "youtube"
)
mycursor = mycon.cursor(buffered=True)


# BUILDING CONNECTION WITH YOUTUBE API
api_key = "AIzaSyChxcS4G0thj6eLminxF7VKEDYWEeoqfMM"
youtube = build('youtube','v3',developerKey=api_key)


# FUNCTION TO GET CHANNEL DETAILS
def get_channel_details(channel_id):
    request = youtube.channels().list(part = 'snippet,contentDetails,statistics,status',id = channel_id)
    response = request.execute()
    for item in response["items"]:
            data = {
                    'channel_id':str(item["id"]),
                    'channel_name':str(item["snippet"]["title"]),
                    'channel_launch_date':item["snippet"]["publishedAt"],
                    'channel_description':item["snippet"]["description"],
                    'channel_views':int(item["statistics"]["viewCount"]),
                    'channel_subscription':int(item["statistics"]["subscriberCount"]),
                    'channel_video_count':int(item["statistics"]["videoCount"]),
                    'channel_playlist_id':item["contentDetails"]["relatedPlaylists"]["uploads"]
                    }
    return(data)

def get_playlist_details(playlist):
  video_id = []
  next_page_token = None
  while True:
      request = youtube.playlistItems().list(part = 'contentDetails', playlistId = playlist,  maxResults = 50, pageToken = next_page_token)
      response = request.execute()
      for item in response["items"]:
          video_id.append(item["contentDetails"]["videoId"])
      next_page_token = response.get("nextPageToken")
      if not next_page_token:
        break
  return video_id

def get_video_details(video_ids):
  video_details =[]
  for video_id in video_ids:
    request = youtube.videos().list(part = 'snippet,contentDetails,statistics', id = video_id)
    response = request.execute()
    for item in response["items"]:
        data = {
              'video_id' : item["id"],
              'channel_id' : item["snippet"]["channelId"],
              'channel_name' : item["snippet"]["channelTitle"],
              'video_name' : item["snippet"]["title"],
              'video_date' : item["snippet"]["publishedAt"],
              'video_description' : item["snippet"]["description"],
              'video_duration' :duration(item["contentDetails"]["duration"]),
              'video_views' : int(item["statistics"]["viewCount"])if 'viewCount' in response['items'][0]['statistics'] else 0,
              'video_likes' : int(item["statistics"]["likeCount"]) if 'likeCount' in response['items'][0]['statistics'] else 0,
              'video_dislikes' :int( item["statistics"]["dislikeCount"]) if 'dislikeCount' in response['items'][0]['statistics'] else 0,
              'video_favourite' : int(item["statistics"]["favoriteCount"]) if 'favoriteCount' in response['items'][0]['statistics'] else 0,
              'video_comment_count' : int(item["statistics"]["commentCount"]) if 'commentCount' in response['items'][0]['statistics'] else 0,
              }
        video_details.append(data)
  return video_details

def get_comment_details(video_ids):
    comment_list = []
    for video_id in video_ids:
        try:
            request = youtube.commentThreads().list(part='snippet', videoId=video_id, maxResults=50)
            response = request.execute()
            if 'items' not in response:
                continue
            for item in response["items"]:
                 comment_details = {
                        'comment_id': item['snippet']['topLevelComment']['id'],
                        'video_id': video_id,
                        'comment_text': item['snippet']['topLevelComment']['snippet']['textDisplay'],
                        'comment_author': item['snippet']['topLevelComment']['snippet']['authorDisplayName'],
                        'commented_on': item['snippet']['topLevelComment']['snippet']['publishedAt']
                        }
                 comment_list.append(comment_details)
        except :
            continue
    return comment_list

from pymongo import MongoClient
client = pymongo.MongoClient("mongodb+srv://pnhurukadli:O9IWeOJZj89cJxwe@cluster0.tmqwxri.mongodb.net/?retryWrites=true&w=majority")
db = client['test']
db

db = client['youtube']
col_1 = db['channel_details']
def get_channel_details_1(channel_id):
    api_key = "AIzaSyChxcS4G0thj6eLminxF7VKEDYWEeoqfMM"
    api_service_name = "youtube"
    api_version = "v3"

    youtube = build(api_service_name, api_version, developerKey=api_key)
    request = youtube.channels().list(part = 'snippet,contentDetails,statistics,status',id = channel_id)
    response = request.execute()
    for item in response["items"]:
            data = {
                    'channel_id':str(item["id"]),
                    'channel_name':str(item["snippet"]["title"]),
                    'channel_launch_date':item["snippet"]["publishedAt"],
                    'channel_description':item["snippet"]["description"],
                    'channel_views':int(item["statistics"]["viewCount"]),
                    'channel_subscription':int(item["statistics"]["subscriberCount"]),
                    'channel_video_count':int(item["statistics"]["videoCount"]),
                    'channel_playlist_id':item["contentDetails"]["relatedPlaylists"]["uploads"]
                    }
    return(data)


db = client['youtube']
col_2 = db['video_details']
def get_video_details(video_ids):
  video_details =[]
  api_key = "AIzaSyChxcS4G0thj6eLminxF7VKEDYWEeoqfMM"
  api_service_name = "youtube"
  api_version = "v3"
  youtube = build(api_service_name, api_version, developerKey=api_key)
  for video_id in video_ids:
    request = youtube.videos().list(part = 'snippet,contentDetails,statistics', id = video_id)
    response = request.execute()
    for item in response["items"]:
        data = {
              'video_id' : item["id"],
              'channel_id' : item["snippet"]["channelId"],
              'channel_name' : item["snippet"]["channelTitle"],
              'video_name' : item["snippet"]["title"],
              'video_date' : item["snippet"]["publishedAt"],
              'video_description' : item["snippet"]["description"],
              'video_duration' :item["contentDetails"]["duration"],
              'video_views' : int(item["statistics"]["viewCount"])if 'viewCount' in response['items'][0]['statistics'] else 0,
              'video_likes' : int(item["statistics"]["likeCount"]) if 'likeCount' in response['items'][0]['statistics'] else 0,
              'video_dislikes' :int( item["statistics"]["dislikeCount"]) if 'dislikeCount' in response['items'][0]['statistics'] else 0,
              'video_favourite' : int(item["statistics"]["favoriteCount"]) if 'favoriteCount' in response['items'][0]['statistics'] else 0,
              'video_comment_count' : int(item["statistics"]["commentCount"]) if 'commentCount' in response['items'][0]['statistics'] else 0,
              }
        video_details.append(data)
  return(video_details)


db = client['youtube']
col_3 = db['comment_details']
def get_comment_details(video_ids):
    comment_list = []
    api_key = "AIzaSyChxcS4G0thj6eLminxF7VKEDYWEeoqfMM"
    api_service_name = "youtube"
    api_version = "v3"
    youtube = build(api_service_name, api_version, developerKey=api_key)
    for video_id in video_ids:
        try:
            request = youtube.commentThreads().list(part='snippet', videoId=video_id, maxResults=50)
            response = request.execute()
            if 'items' not in response:
                continue
            for item in response["items"]:
                 comment_details = {
                        'comment_id': item['snippet']['topLevelComment']['id'],
                        'video_id': video_id,
                        'comment_text': item['snippet']['topLevelComment']['snippet']['textDisplay'],
                        'comment_author': item['snippet']['topLevelComment']['snippet']['authorDisplayName'],
                        'commented_on': item['snippet']['topLevelComment']['snippet']['publishedAt']
                        }
                 comment_list.append(comment_details)
        except :
            continue
    return comment_list

# FUNCTION TO GET CHANNEL NAMES FROM MONGODB
def get_channel_details_1(channel_id):
    try:
        ch_details = get_channel_details(channel_id)
        playlist = ch_details["channel_playlist_id"]
        video_ids = get_playlist_details(playlist)
        vi_ids = get_video_details(video_ids)
        com_details = get_comment_details(video_ids)

        coll1 = db["channel_details"]
        coll1.insert_one({"channel_information": ch_details, "video_information": vi_ids,
                          "comment_information": com_details})

        st.success("Uploaded completed successfully")
    except Exception as e:
        st.error(f"Error uploading to MongoDB: {e}")
        st.warning("Upload failed")


ch_list = []
db = client["youtube"]
coll1 = db["channel_details"]
for ch_data in coll1.find({},{"_id":0}):
    ch_list.append(ch_data["channel_information"])
df = pd.DataFrame(ch_list)
df

# HOME PAGE
if selected == "Home":
    # Title Image

    col1, col2 = st.columns(2, gap='medium')
    col1.markdown("## :red[Domain] : Social Media")
    col1.markdown("## :blue[Technologies used] : Python,MongoDB, Youtube Data API, MySql, Streamlit")
    col1.markdown(
        "## :blue[Overview] : Retrieving the Youtube channels data from the Google API, storing it in a MongoDB as data lake, migrating and transforming data into a SQL database,then querying the data and displaying it in the Streamlit app.")
    col2.markdown("#   ")
    col2.markdown("#   ")
    col2.markdown("#   ")


# EXTRACT and TRANSFORM PAGE
if selected == "Extract and Transform":
    tab1, tab2 = st.tabs(["$\huge EXTRACT $", "$\huge TRANSFORM $"])

    # EXTRACT TAB
    with tab1:
        st.markdown("#    ")
        st.write("### Enter YouTube Channel_ID below :")
        channel_id = st.text_input(
            "Hint : Goto channel's home page > Right click > View page source > Find channel_id").split(',')

        if st.button("Extract Data"):
            ch_list = []
            db = client["youtube"]
            coll1 = db["channel_details"]
            for ch_data in coll1.find({}, {"_id": 0}):
                ch_list.append(ch_data["channel_information"]["channel_id"])

            if channel_id in ch_list:
                st.success("Channel details of the given channel ids exists")
            else:
                insert = get_channel_details_1(channel_id)
                st.success(insert)

        # TRANSFORM TAB
    with tab2:
        st.markdown("#   ")
        st.markdown("### Select a channel to begin Transformation to SQL")

        ch_names = channel_id
        user_inp = st.selectbox("Select channel", options=ch_names)

        create_query = '''CREATE TABLE IF NOT EXISTS youtube.channel_information (
                           channel_name VARCHAR(255),
                           channel_id VARCHAR(255),
                           channel_subscription INT,
                           channel_views INT,
                           channel_video_count INT,
                           channel_description TEXT,
                           channel_playlist_id VARCHAR(255)
                        )'''

        try:
            mycursor.execute(create_query)
        except Exception as e:
            print(f"Error creating table: {e}")

        for index, row in df.iterrows():
            insert_query = '''Insert into channel_information (channel_name,
                                                  channel_id,
                                                  channel_subscription,
                                                  channel_views,
                                                  channel_video_count,
                                                  channel_description,
                                                  channel_playlist_id)
                              values (%s, %s, %s, %s, %s, %s, %s)'''
            values = (row['channel_name'],
                      row['channel_id'],
                      row['channel_subscription'],
                      row['channel_views'],
                      row['channel_video_count'],
                      row['channel_description'],
                      row['channel_playlist_id'])

            try:
                mycursor.execute(insert_query, values)
            except Exception as e:
                print(f"Error inserting data: {e}")

        vi_list = []
        db = client["youtube"]
        coll1 = db["channel_details"]

        for vi_data in coll1.find({}, {"_id": 0, "video_information": 1}):
            video_info = vi_data.get("video_information")
            if video_info is not None:
                vi_list.extend(video_info)

        df1 = pd.DataFrame(vi_list)
        df1

        create_query = '''CREATE TABLE IF NOT EXISTS youtube.video_information (
                           video_id VARCHAR(255),
                           channel_id VARCHAR(255),
                           channel_name VARCHAR(255),
                           video_name VARCHAR(255),
                           video_date VARCHAR(255),
                           video_description TEXT,
                           video_duration TEXT,
                           video_views BIGINT,
                           video_likes BIGINT,
                           video_favourite INT,
                           video_comment_count INT
                        )'''

        try:
            mycursor.execute(create_query)
        except Exception as e:
            print(f"Error creating table: {e}")

        for index, row in df1.iterrows():
            insert_query = '''Insert into video_information (video_id,
                                                  channel_id,
                                                  channel_name,
                                                  video_name,
                                                  video_date,
                                                  video_description,
                                                  video_duration,
                                                  video_views,
                                                  video_likes,
                                                  video_favourite,
                                                  video_comment_count)
                              values (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)'''
            values = (row['video_id'],
                      row['channel_id'],
                      row['channel_name'],
                      row['video_name'],
                      row['video_date'],
                      row['video_description'],
                      row['video_duration'],
                      row['video_views'],
                      row['video_likes'],
                      row['video_favourite'],
                      row['video_comment_count']
                      )
            try:
                mycursor.execute(insert_query, values)
            except Exception as e:
                print(f"Error inserting data: {e}")

        if st.button("Submit"):
            try:

                insertintochannel_information()
                insertintovideo_information()
                insertintocomment_information()
                st.success("Transformation to MySQL Successful!!!")
            except:
                st.error("Channel details already transformed!!")

# VIEW PAGE
if selected == "View":

    st.write("## :orange[Select any question to get Insights]")
    questions = st.selectbox('Questions',
                             ['Click the question that you would like to query',
                              '1. What are the names of all the videos and their corresponding channels?',
                              '2. Which channels have the most number of videos, and how many videos do they have?',
                              '3. What are the top 10 most viewed videos and their respective channels?',
                              '4. How many comments were made on each video, and what are their corresponding video names?',
                              '5. Which videos have the highest number of likes, and what are their corresponding channel names?',
                              '6. What is the total number of likes and dislikes for each video, and what are their corresponding video names?',
                              '7. What is the total number of views for each channel, and what are their corresponding channel names?',
                              '8. What are the names of all the channels that have published videos in the year 2022?',
                              '9. What is the average duration of all videos in each channel, and what are their corresponding channel names?',
                              '10. Which videos have the highest number of comments, and what are their corresponding channel names?'])

    if questions == '1. What are the names of all the videos and their corresponding channels?':
        mycursor.execute(
            """SELECT  video_name, channel_name FROM video_information ORDER BY channel_name""")
        df = pd.DataFrame(mycursor.fetchall(), columns=mycursor.column_names)
        st.write(df)

    elif questions == '2. Which channels have the most number of videos, and how many videos do they have?':
        mycursor.execute("""SELECT channel_name , channel_video_count
                            FROM channel_information
                            ORDER BY channel_video_count DESC""")
        df = pd.DataFrame(mycursor.fetchall(), columns=mycursor.column_names)
        st.write(df)
        st.write("### :green[Number of videos in each channel :]")

        import plotly.express as px
        # st.bar_chart(df,x= mycursor.column_names[0],y= mycursor.column_names[1])
        fig = px.bar(df,
                     x=mycursor.column_names[0],
                     y=mycursor.column_names[1],
                     orientation='v',
                     color=mycursor.column_names[0]
                     )
        st.plotly_chart(fig, use_container_width=True)

    elif questions == '3. What are the top 10 most viewed videos and their respective channels?':
        mycursor.execute("""SELECT channel_name, video_views 
                            FROM video_information
                            ORDER BY video_views DESC
                            LIMIT 10""")
        df = pd.DataFrame(mycursor.fetchall(), columns=mycursor.column_names)
        st.write(df)
        st.write("### :green[Top 10 most viewed videos :]")
        fig = px.bar(df,
                     x=mycursor.column_names[0],
                     y=mycursor.column_names[1],
                     orientation='h',
                     color=mycursor.column_names[0]
                     )
        st.plotly_chart(fig, use_container_width=True)

    elif questions == '4. How many comments were made on each video, and what are their corresponding video names?':
        mycursor.execute("""SELECT video_name,video_comment_count FROM youtube.video_information""")
        df = pd.DataFrame(mycursor.fetchall(), columns=mycursor.column_names)
        st.write(df)

    elif questions == '5. Which videos have the highest number of likes, and what are their corresponding channel names?':
        mycursor.execute("""SELECT channel_name,video_name,video_likes 
                            FROM video_information
                            ORDER BY video_likes DESC
                            LIMIT 10""")
        df = pd.DataFrame(mycursor.fetchall(), columns=mycursor.column_names)
        st.write(df)
        st.write("### :green[Top 10 most liked videos :]")
        fig = px.bar(df,
                     x=mycursor.column_names[2],
                     y=mycursor.column_names[1],
                     orientation='h',
                     color=mycursor.column_names[0]
                     )
        st.plotly_chart(fig, use_container_width=True)

    elif questions == '6. What is the total number of likes and dislikes for each video, and what are their corresponding video names?':
        mycursor.execute("""SELECT video_name, video_likes
                            FROM video_information
                            ORDER BY video_likes DESC""")
        df = pd.DataFrame(mycursor.fetchall(), columns=mycursor.column_names)
        st.write(df)

    elif questions == '7. What is the total number of views for each channel, and what are their corresponding channel names?':
        mycursor.execute("""SELECT channel_name, channel_views
                            FROM channel_information
                            ORDER BY channel_views DESC""")
        df = pd.DataFrame(mycursor.fetchall(), columns=mycursor.column_names)
        st.write(df)
        st.write("### :green[Channels vs Views :]")
        fig = px.bar(df,
                     x=mycursor.column_names[0],
                     y=mycursor.column_names[1],
                     orientation='v',
                     color=mycursor.column_names[0]
                     )
        st.plotly_chart(fig, use_container_width=True)

    elif questions == '8. What are the names of all the channels that have published videos in the year 2022?':
        mycursor.execute("""SELECT channel_name
                            FROM video_information
                            WHERE videodate LIKE '2022%'
                            GROUP BY channel_name
                            ORDER BY channel_name""")
        df = pd.DataFrame(mycursor.fetchall(), columns=mycursor.column_names)
        st.write(df)

    elif questions == '9. What is the average duration of all videos in each channel, and what are their corresponding channel names?':
        mycursor.execute("""select video_duration, channel_name from youtube.video_information where video_duration=(select avg(video_duration) from youtube.video_information)""")
        df = pd.DataFrame(mycursor.fetchall(), columns=mycursor.column_names
                          )
        st.write(df)
        st.write("### :green[Average video duration for channels :]")



    elif questions == '10. Which videos have the highest number of comments, and what are their corresponding channel names?':
        mycursor.execute("""SELECT channel_name,video_id,video_comment_count
                            FROM video_information
                            ORDER BY video_comment_count DESC
                            LIMIT 10""")
        df = pd.DataFrame(mycursor.fetchall(), columns=mycursor.column_names)
        st.write(df)
        st.write("### :green[Videos with most comments :]")
        fig = px.bar(df,
                     x=mycursor.column_names[1],
                     y=mycursor.column_names[2],
                     orientation='v',
                     color=mycursor.column_names[0]
                     )
        st.plotly_chart(fig, use_container_width=True)



